Index: my-app/src/store/api/currentWeatherApi.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\nimport {WeatherData} from \"../../api/types\";\n\n\n// Define a service using a base URL and expected endpoints\nexport const currentWeatherApi = createApi({\n        reducerPath: 'weatherApi',\n        baseQuery: fetchBaseQuery({ baseUrl: 'http://api.weatherapi.com/v1' }),\n        endpoints: (builder) => ({\n            getWeatherByLocation: builder.query<WeatherData, string>({\n            query: (location: string) => `/current.json?key=${process.env.REACT_APP_WEATHER_API_KEY}q=${location}&aqi=no`,\n        }),\n    }),\n    })\n\n// Export hooks for usage in functional components, which are\n// auto-generated based on the defined endpoints\nexport const { useGetWeatherByLocationQuery } = currentWeatherApi
===================================================================
diff --git a/my-app/src/store/api/currentWeatherApi.tsx b/my-app/src/store/api/currentWeatherApi.tsx
--- a/my-app/src/store/api/currentWeatherApi.tsx	
+++ b/my-app/src/store/api/currentWeatherApi.tsx	
@@ -8,7 +8,7 @@
         baseQuery: fetchBaseQuery({ baseUrl: 'http://api.weatherapi.com/v1' }),
         endpoints: (builder) => ({
             getWeatherByLocation: builder.query<WeatherData, string>({
-            query: (location: string) => `/current.json?key=${process.env.REACT_APP_WEATHER_API_KEY}q=${location}&aqi=no`,
+            query: (location) => `/current.json?key=${process.env.REACT_APP_WEATHER_API_KEY}q=${location}&aqi=no`,
         }),
     }),
     })
